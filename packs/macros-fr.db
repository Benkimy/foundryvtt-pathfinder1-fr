{"name": "R\u00e9v\u00e9ler le dernier message", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro r\u00e9v\u00e8le \u00e0 tous le dernier message non-visible de tous (cach\u00e9/aveugle/priv\u00e9)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n//\n\nif(game.user.isGM) {\n  let messages = game.messages.entries.filter( m => m.data.whisper.length || m.data.blind )\n  if( messages.length ) {\n    messages[messages.length-1].update({whisper: [], blind: false});\n    ui.notifications.info(\"Le dernier message a \u00e9t\u00e9 r\u00e9v\u00e9l\u00e9 !\")\n  } else {\n    ui.notifications.warn(\"Aucun message \u00e0 r\u00e9v\u00e9ler !\")\n  }\n}\n", "img": "systems/pf1/icons/feats/alertness.jpg", "actorIds": [], "_id": "EUps3Pi8zpviqA2w"}
{"name": "effet", "type": "script", "scope": "global", "command": "// Macro utilitaire qui ne doit pas \u00eatre utilis\u00e9e individuellement\n//\n//\n//\n/*- DOCUMENTATION -*/\n// Adaptation francophone de: https://gitlab.com/JusticeNoon/foundry-macros/-/blob/master/PF1E%20Entity-Link/Utilities/Force%20Update%20All.js\n//\n// Syntaxe: <Action> <Nom effet> [de/sur <cibles>] [etq <Nom alternatif>] [au <niveau>]\n//\n// Action: \n//   Appliquer:  Cr\u00e9e et active un effet\n//   Retirer:    D\u00e9sactive et supprime un effet\n//   Permuter:   D\u00e9sactive un effet si activ\u00e9 ou l'inverse (change l'\u00e9tat). Cr\u00e9e l'effet s'il n'existe pas\n//   Activer:    Active l'effet si pr\u00e9sent\n//   D\u00e9sactiver: D\u00e9sactive l'effet ou le cr\u00e9e\n//   Changer:    Ne fait rien sauf modifier le niveau\n//\n// Nom de l'effet:\n//   Cherche en priorit\u00e9 dans la liste de compendium (compendiumPriority), puis dans \"pf1-fr.buffsfr\" par d\u00e9faut\n//\n// Cibles (S\u00e9par\u00e9es par des virgules, \"-\" pour retirer):\n//   s\u00e9lection: (d\u00e9faut). Les jetons/acteurs s\u00e9lectionn\u00e9s\n//   [nom]:     L'acteur correspondant au nom\n//   cible(s):  Toutes les cibles\n//   template:  Tous les jetons/acteurs sous le dernier template\n//   moi:       La personne sur la carte (chat) ou le personnage du joueur\n//   actif:     L'acteur actif de la personne\n//   #[uuid]:   Utilis\u00e9 \u00e0 l'interne pour l'instant\n//\n// Nom alternatif:\n//   Recherche le nom alternatif ou l'original. Les guillemets ne fonctionnent pas. Utiliser _ si le nom contient un mot-cl\u00e9 (de,sur,etq,au)\n//\n// Niveau\n//   Niveau:    Sp\u00e9cifie le niveau si indiqu\u00e9.\n//   @cl-[1,2,3,s]\tAccepte les donn\u00e9es \"rollData\". @cl-1, @cl-2, @cl-3, @cl-s sont des raccourcis pour @attributes.spells.spellbooks.X.cl.total\n\nconst c = {\n\tcompendiumPriority: [\"world.buffs\"]\n}\n\n/*-\t\t\tCOMMAND\t\t\t\t\t-*/\ntry {\nvar isEvent = typeof event.srcElement.closest === \"function\"\n\tvar inputText =  window.macroChain?.pop() || (isEvent && event.srcElement.closest('button,a')?.textContent.trim()),\n\t\tmacroId = this.id,\n\t\tchatMessage = isEvent ? game.messages.get(event.srcElement.closest('.message')?.getAttribute('data-message-id')) : null,\n\t\targParse = /^([aA]ppliquer|[rR]etirer|[pP]ermuter|[aA]ctiver|[dD\u00e9sactiver]|[cC]hanger) \"?([^\\n]*?)\"?( (?:de|sur|etq|au|pour)(?=([^\"\\\\]*(\\\\.|\"([^\"\\\\]*\\\\.)*[^\"\\\\]*\"))*[^\"]*$) (?:.*))?$/,\n\t\toperator, buffName, modString,\n\t\tcompCollNames = c.compendiumPriority.concat(['pf1-fr.buffsfr']),\n\t\tcompSearches = [],\n\t\tmyself = game.actors.get(chatMessage?.data.speaker?.actor) ?? game.user.character ?? canvas.tokens.controlled[0]?.actor,\n\t\ttargets,\n\t\tmodList,\n\t\ttargetActors = [],\n\t\texcludedActors = [],\n\t\taltName,\n\t\tlevelOverride;\n\tif (inputText.indexOf('::') == 0)\n\t\tinputText = /['`\"](.*)['`\"],.*/.exec(event.srcElement.previousElementSibling?.title.trim())?.[1];\n\t[operator, buffName, modString] = inputText.match(argParse).filter(o => o).slice(1,4);\n\n\tif (modString) {\n\t\tmodList = modString.split(/ (de|sur|etq|au) /).slice(1);\n\t\tfor (var k = 0; k < modList.length; k += 2) {\n\t\t\tswitch(modList[k]) {\n\t\t\t\tcase 'de':\n\t\t\t\tcase 'sur':\n\t\t\t\t\ttargets = modList[k+1].replace(/_/g,' ');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'etq':\n\t\t\t\t\taltName = modList[k+1].replace(/_/g,' ');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'au':\n\t\t\t\t\tif (modList[k+1].indexOf('->') > -1)\n\t\t\t\t\t\tmodList[k+1] = event.srcElement.nextElementSibling?.textContent.trim();\n\t\t\t\t\tlevelOverride = modList[k+1];\n\t\t\t\t\tif (levelOverride.search(/[^\\d]/) > -1) {\n\t\t\t\t\t\tlet shorthand = {\t'cl-1': myself.data.data.attributes.spells.spellbooks.primary.cl.total,\n\t\t\t\t\t\t\t\t\t\t\t'cl-2': myself.data.data.attributes.spells.spellbooks.secondary.cl.total,\n\t\t\t\t\t\t\t\t\t\t\t'cl-3': myself.data.data.attributes.spells.spellbooks.tertiary.cl.total,\n\t\t\t\t\t\t\t\t\t\t\t'cl-s': myself.data.data.attributes.spells.spellbooks.spelllike.cl.total};\n\t\t\t\t\t\tlevelOverride = (new Roll(levelOverride, Object.assign(shorthand, myself.data.data)).roll()).total;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!targets) targets = 's\u00e9lection';\n\t(targets ? targets.split(',') : ['s\u00e9lection']).forEach(tar => {\n\t\tvar accuActors;\n\t\ttar = tar.trim();\n\t\tif (tar.charAt(0) == '-') {\n\t\t\taccuActors = excludedActors;\n\t\t\ttar = tar.slice(1);\n\t\t}\n\t\telse\n\t\t\taccuActors = targetActors;\n\t\tswitch(tar.toLowerCase()) {\n\t\t\tcase 's\u00e9lection':\n\t\t\t\tif (canvas.tokens.controlled.length == 0) ui.notifications.warn('Aucun jeton s\u00e9lectionn\u00e9');\n\t\t\t\taccuActors.push(...canvas.tokens.controlled.map(o => o.actor));\n\t\t\t\tbreak;\n\t\t\tcase 'template':\n\t\t\t\tlet temp = chatMessage?.data.flags.pf1?.metadata?.template ?? canvas.templates.objects.children.filter(o => o.data.user == game.userId)?.pop()?.id;\n\t\t\t\tif (!temp) ui.notifications.warn('Aucun template trouv\u00e9');\n\t\t\t\telse {\n\t\t\t\t\tlet tokens = canvas.tokens.objects.children.filter(o => canvas.grid.getHighlightLayer('Template.' + temp).geometry.containsPoint(o.center));\n\t\t\t\t\taccuActors.push(...tokens.map(o => o.actor));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'cible':\n\t\t\tcase 'cibles':\n\t\t\t\taccuActors.push(...[...game.user.targets].map(o => o.actor));\n\t\t\t\tbreak;\n\t\t\tcase 'moi':\n\t\t\t\taccuActors.push(myself);\n\t\t\t\tbreak;\n\t\t\tcase 'actif':\n\t\t\t\taccuActors.push(game.pf1.ActorPF.getActiveActor());\n\t\t\t\tbreak;\n\t\t\tcase 'restant':\n\t\t\t\ttar = '#' + chatMessage?.data.flags.applyBuff?.remaining;\n\t\t\t\tif (tar == '#undefined')\n\t\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t//Name or uuid search\n\t\t\t\tif (tar.indexOf('#') != 0)\n\t\t\t\t\taccuActors.push(game.actors.find(o => o.name == tar));\n\t\t\t\telse {\n\t\t\t\t\tvar [uScene, uToken, uActor] = tar.match(/^#(?:Scene\\.([^.]*))?(?:\\.Token\\.([^.]*))?(?:\\.?Actor\\.([^.]*))?$/).slice(1);\n\t\t\t\t\tif (uActor)\n\t\t\t\t\t\taccuActors.push(game.actors.get(uActor));\n\t\t\t\t\telse if (uScene == canvas.id)\n\t\t\t\t\t\taccuActors.push(canvas.tokens.objects.children.find(o => o.id == uToken).actor);\n\t\t\t\t}\n\t\t}\n\t});\n\n\texcludedActors = excludedActors.map(o => o.id);\n\ttargetActors = [...new Set(targetActors)].filter(o => o && !excludedActors.includes(o.id));\n\texcludedActors = [];\n\t\n\t//This is only moved down here so I can assume all the serialized stuff above is done\n\tcompCollNames.forEach((coll, place) => {\n\t\tcompSearches[place] = new Promise((resolve, reject) => {\n\t\t\t(async () => {\n\t\t\t\tlet pack = game.packs.get(coll);\n\t\t\t\tif (pack) {\n\t\t\t\t\tlet search = await pack.getIndex().then(p => p.find(o => o.name == buffName));\n\t\t\t\t\tif (search)\n\t\t\t\t\t\tpack.getEntity(search._id).then(bItem => resolve(bItem));\n\t\t\t\t\telse\n\t\t\t\t\t\t resolve(false);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tresolve(false);\n\t\t\t})();\t\t\t\n\t\t});\n\t});\n\tPromise.all(compSearches).then(comps => buffFound(comps.find(c => c)));\n}\ncatch (err) {\n\tconsole.log(err, \"Votre commande n'a pas fonctionn\u00e9\");\n}\nfunction buffFound(buff) {\n\tif (!buff) { return ui.notifications.warn(\"Effet introuvable!\") }\n\tif (typeof levelOverride != 'undefined') buff.data.data.level = levelOverride;\n\tif (typeof altName != 'undefined') buff.data.name = altName;\n\ttargetActors.forEach(act => {\n\t\tif (act && act.hasPerm(game.user, 'OWNER')) {\n\t\t\tlet presentBuff = act.items.find(o => {return o.data.type == 'buff' && (o.name == buffName || o.name == altName);});\n\t\t\tlet updateArgs = [];\n\t\t\tswitch(operator.toLowerCase()) {\n\t\t\t\tcase 'appliquer':\n\t\t\t\t\tif (!buff.data.data.active)\n\t\t\t\t\t\tbuff.data.data.active = true;\n\t\t\t\t\t\n\t\t\t\t\tif (presentBuff)\n\t\t\t\t\t\tpresentBuff.update({'data.active': true, 'data.level': buff.data.data.level, 'name': buff.data.name});\n\t\t\t\t\telse\n\t\t\t\t\t\tact.createOwnedItem(buff);\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'retirer':\n\t\t\t\t\tif (presentBuff)\n\t\t\t\t\t\tpresentBuff.delete();\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'permuter':\n\t\t\t\t\tif (presentBuff)\n\t\t\t\t\t\tpresentBuff.update({'data.active': !getProperty(presentBuff.data, 'data.active'), 'data.level': buff.data.data.level, 'name': buff.data.name});\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!buff.data.data.active)\n\t\t\t\t\t\t\tbuff.data.data.active = true;\n\t\t\t\t\t\t\n\t\t\t\t\t\tact.createOwnedItem(buff);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'activer':\n\t\t\t\t\tif (presentBuff)\n\t\t\t\t\t\tpresentBuff.update({'data.active': true, 'data.level': buff.data.data.level, 'name': buff.data.name});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd\u00e9sactiver':\n\t\t\t\t\tif (presentBuff)\n\t\t\t\t\t\tpresentBuff.update({'data.active': false, 'data.level': buff.data.data.level, 'name': buff.data.name});\n\t\t\t\t\telse\n\t\t\t\t\t\tact.createOwnedItem(buff);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'changer':\n\t\t\t\t\tif (presentBuff && typeof levelOverride != 'undefined')\n\t\t\t\t\t\tpresentBuff.update({'data.level': buff.data.data.level, 'name': buff.data.name});\n\t\t\t\tdefault:\n\t\t\t\t\tui.notifications.warn(\"Commande inconnue. Se r\u00e9f\u00e9rer \u00e0 la documentation!\");\n\t\t\t}\n\t\t}\n\t\telse if (act)\n\t\t\texcludedActors.push(act);\n\t});\n\tvar successStr = 'Aucun jeton/acteur affect\u00e9.',\n\t\taffectedActors = targetActors.length - excludedActors.length;\n\tif (affectedActors != 0)\n\t\tsuccessStr = `${buff.data.name} chang\u00e9 sur ${affectedActors} jeton/acteur${(affectedActors > 1 ? 's' : '')}.`;\n\tif (excludedActors.length > 0) {\n\t\tsuccessStr += ' Requiert l\\'assistance du MJ pour le reste.';\n\t\tvar remainingModList = modList.filter((o,p) => o != 'to' && modList[p-1] != 'to'),\n\t\t\texcludedNames = excludedActors.map(o => (o.token ? o.token.name : o.name)).join(', '),\n\t\t\tgmButtonTitle = `${operator} ${buffName} sur restant ${remainingModList.join(' ')}`.trim(),\n\t\t\tenrichedButton = `<a class=\"entity-link\" data-entity=\"Macro\" data-id=\"${macroId}\"><i class=\"fas fa-terminal\"></i> ${gmButtonTitle}</a>`,\n\t\t\tflavorText = `J'essaie de<br>${enrichedButton}<br>Le reste: ${excludedNames}`,\n\t\t\tremainingUUID = excludedActors.map(o => (o.token ? o.token.uuid : o.uuid)).join(','),\n\t\t\tspoofedRoll = new Roll(excludedActors.length.toString()).roll();\n\t\tspoofedRoll.formula = 'Affectera:';\n\t\t\tChatMessage.create({\n\t\t\tblind: true,\n\t\t\tsound: null,\n\t\t\tflavor: flavorText,\n\t\t\tspeaker: ChatMessage.getSpeaker(),\n\t\t\tcontent: 'Je vais \u00eatre supprim\u00e9',\n\t\t\ttype: CONST.CHAT_MESSAGE_TYPES.ROLL,\n\t\t\troll: spoofedRoll,\n\t\t\twhisper: ChatMessage.getWhisperRecipients(\"GM\"),\n\t\t\tflags: {applyBuff: {remaining: remainingUUID}}\n\t\t});\n\t}\n\tui.notifications.info(successStr.trim());\n}\n\n", "img": "systems/pf1/icons/spells/air-burst-sky-1.jpg", "actorIds": [], "_id": "yAC3DxS0LGLuwzlB"}
{"name": "Importer un PNJ", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro permet d'importer un PNJ en copiant un bloc de statistiques depuis \n// un livre (PDF) ou le site www.pathfinder-fr.org. Testez-le avec:\n// https://www.pathfinder-fr.org/Wiki/Pathfinder-RPG.G%C3%A9ant%20des%20collines.ashx\n//\n// Base : Foundry VTT (0.7.7)\n// Syst\u00e8me : Pathfinder 1 (0.75.13)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\n///// CONFIGURATION\n\n//// SCRIPT\nlet html = `<textarea id=\"pf1frImport\" placeholder=\"Copier le bloc de texte ici\\n\\nRappel: vous devez ajouter ## devant chaque ligne contenant une liste de sorts \u00e0 importer!!\" rows=\"15\"></textarea>`\n\nlet buttons = { \n  test: {\n    icon: '<i class=\"fas fa-vial fa-fw\"></i>',\n    label: \"Tester (simulation)\",\n    callback: () => {\n      console.log(\"L'erreur qui suit est normale! Elle permet d'\u00e9viter que la fen\u00eatre de dialogue se ferme ;-)\")\n      const data = MacrosPF1.extractCharacter(document.getElementById(\"pf1frImport\").value)\n      MacrosPF1.importCharacter(data, true)\n      throw \"N'oubliez pas d'importer!\"\n    }\n\u00a0\u00a0},\n  import: {\n    icon: '<i class=\"fas fa-file-import fa-fw\"></i>',\n    label: \"Importer\",\n    callback: () => {\n      const data = MacrosPF1.extractCharacter(document.getElementById(\"pf1frImport\").value)\n      MacrosPF1.importCharacter(data)\n    }\n  }\n}\n\nnew Dialog({\n    title: \"Importer un PNJ\",\n    content: html,\n    buttons: buttons,\n  }, { width: 800 }).render(true);\n", "img": "icons/environment/people/commoner.webp", "actorIds": [], "_id": "YPJRPXci1uCUiRO6"}
{"name": "\u00c9mettre de la lumi\u00e8re", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro permet d'activer/d\u00e9sactiver de la lumi\u00e8re sur un token\n//\n// Base : Foundry VTT (0.7.5)\n// Syst\u00e8me : Pathfinder 1 (0.75.6)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\n///// CONFIGURATION\nconst porteeCourte = 6;\nconst porteeLongue = 2 * porteeCourte;\n\n///// SCRIPT\nconst tokens = canvas.tokens.controlled.filter( t => t.actor && t.actor.hasPerm(game.user, \"OWNER\") )\n\nif( tokens.length == 0 ) { ui.notifications.error(\"Veuillez choisir un token sur la sc\u00e8ne!\"); }\nelse {\n  tokens.forEach( t => {\n    const radius1 = t.brightRadius > 0 || t.dimRadius > 0 ? 0 : porteeCourte\n    const radius2 = t.brightRadius > 0 || t.dimRadius > 0 ? 0 : porteeLongue\n    t.update({brightLight: radius1, dimLight: radius2});\n    MacroMarker.toggle(this);\n  })\n}\n\n", "img": "systems/pf1/icons/items/inventory/lantern.jpg", "actorIds": [], "_id": "9ePEn6JQj3f7cB3T", "flags": {"macro-marker": {"activeData": {"icon": "systems/pf1/icons/items/inventory/lantern.jpg", "tooltip": "Retirer la lumi\u00e8re", "colour": "#edc412", "trigger": "\nconst tokens = canvas.tokens.controlled.filter( t => t.actor && t.actor.hasPerm(game.user, \"OWNER\") )\nreturn tokens.length > 0 && (tokens[0].brightRadius > 0 || tokens[0].dimRadius > 0)\n"}}}}
{"name": "Combattre sur la d\u00e9fensive", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro permet d'activer ou de d\u00e9sactiver l'attaque sur la d\u00e9fensive (s\u00e9lection)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\n///// CONFIGURATION\nconst COMMAND = 'Permuter \"Combattre sur la d\u00e9fensive\"'\n\n//// SCRIPT\nMacrosPF1.applyBuff(COMMAND)\n\n", "img": "systems/pf1/icons/feats/improved-shield-bash.jpg", "actorIds": [], "_id": "1IqmhS75L8bVcNqp", "flags": {"macro-marker": {"activeData": {"icon": "systems/pf1/icons/feats/improved-shield-bash.jpg", "tooltip": "Combattre normalement", "colour": "#bba8a8", "trigger": "\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  const hero = actors[0];\n  const buff = hero.items.find( i => i.type === \"buff\" && i.name === \"Combattre sur la d\u00e9fensive\" )\n  return buff && getProperty(buff.data, \"data.active\")\n} \nreturn false\n"}}}}
{"name": "Activer D\u00e9fense Totale", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro permet d'activer ou de d\u00e9sactiver la d\u00e9fense totale sur un personnage\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\n///// CONFIGURATION\nconst COMMAND = 'Permuter \"D\u00e9fense totale\"'\n\n//// SCRIPT\nMacrosPF1.applyBuff(COMMAND)\n", "img": "systems/pf1/icons/feats/shield-slam.jpg", "actorIds": [], "_id": "Tta2l2WwXVnBObxA", "flags": {"macro-marker": {"activeData": {"icon": "systems/pf1/icons/feats/shield-slam.jpg", "tooltip": "D\u00e9sactiver D\u00e9fense Totale", "colour": "#bba8a8", "trigger": "\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  const hero = actors[0];\n  const buff = hero.items.find( i => i.type === \"buff\" && i.name === \"D\u00e9fense totale\" )\n  return buff && getProperty(buff.data, \"data.active\")\n} \nreturn false\n"}}}}
{"name": "Test : Discr\u00e9tion", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de discr\u00e9tion\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de discr\u00e9tion\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Rester discret ou passer inapercu\", dd: \"vs Perception de l'ennemi\" },\n  { name: \"Tirer embusqu\u00e9\", dd: \"vs Perception de l'ennemi (malus -20)\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Discr\u00e9tion : ${actors[0].name}`, \n    skillId: \"ste\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/green_18.jpg", "actorIds": [], "_id": "xyDKL2vrnrsRdUWO"}
{"name": "Test : Connaissances (Folklore local)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (folklore local)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (folklore local)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Conna\u00eetre les lois, les dirigeants et les endroits poplulaires de la r\u00e9gion\", dd: \"10\" },\n  { name: \"Conna\u00eetre une rumeur assez r\u00e9pandue ou une tradition locale\", dd: \"15\" },\n  { name: \"Conna\u00eetre une organisation secr\u00e8te, ses dirigeants et savoir comment les rencontrer\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Folklore local) : ${actors[0].name}`, \n    skillId: \"klo\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "68opsQaqTLbLVpgE"}
{"name": "Test : Natation", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de natation\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de natation\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Nager dans eaux calmes\", dd: \"10\" },\n  { name: \"Nager dans eaux agit\u00e9es\", dd: \"15\" },\n  { name: \"Nager dans eaux tr\u00e8s agit\u00e9es (par temp\u00eate par exemple)\", dd: \"20\" },  \n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Natation : ${actors[0].name}`, \n    skillId: \"swm\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/emerald_05.jpg", "actorIds": [], "_id": "ggs7CHiTtN6zzuMC"}
{"name": "Test : Dressage", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de dressage\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de dressage\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Diriger un animal\", dd: \"10\" },\n  { name: \"Pousser un animal\", dd: \"25\" },\n  { name: \"\" },\n  { name: \"Enseigner \\\"Arr\u00eate !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Attaque !\\\" \u00e0 un animal\", dd: \"20\" },\n  { name: \"Enseigner \\\"Attends !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Au pied !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Cherche !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Garde !\\\" \u00e0 un animal\", dd: \"20\" },\n  { name: \"Enseigner \\\"Joue !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Prot\u00e8ge !\\\" \u00e0 un animal\", dd: \"20\" },\n  { name: \"Enseigner \\\"Suis !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Travaille !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Va chercher !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"Enseigner \\\"Viens !\\\" \u00e0 un animal\", dd: \"15\" },\n  { name: \"\" },\n  { name: \"Enseigner la fonction \\\"Animal de chasse\\\"\", dd: \"20\" },\n  { name: \"Enseigner la fonction \\\"Animal de combat\\\"\", dd: \"20\" },\n  { name: \"Enseigner la fonction \\\"Animal de foire\\\"\", dd: \"15\" },\n  { name: \"Enseigner la fonction \\\"Animal de garde\\\"\", dd: \"20\" },\n  { name: \"Enseigner la fonction \\\"Monture\\\"\", dd: \"15\" },\n  { name: \"Enseigner la fonction \\\"Monture de combat\\\"\", dd: \"20\" },\n  { name: \"Enseigner la fonction \\\"Travailleur de force\\\"\", dd: \"15\" },\n  { name: \"\" },\n  { name: \"\u00c9lever un animal sauvage\", dd: \"15 + DV de l'animal\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Dressage : ${actors[0].name}`, \n    skillId: \"han\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/blue_29.jpg", "actorIds": [], "_id": "DBTAPkbdPEMozG1a"}
{"name": "Test : Connaissances (Nature)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (nature)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (nature)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Identifier un danger naturel\", dd: \"15 + FP du danger\" },\n  { name: \"Identifier une plante ou un animal commun\", dd: \"10\" },\n  { name: \"Identifier un ph\u00e9nom\u00e8ne climatique anormal\", dd: \"15\" },\n  { name: \"Reconn\u00eetre la main de l'homme dans un \u00e9l\u00e9ment qui semble naturel\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Nature) : ${actors[0].name}`, \n    skillId: \"kna\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "RADnjap1oluPIX3V"}
{"name": "Test : Acrobaties", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'acrobaties\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'acrobaties\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"\u00c9viter de tomber en se d\u00e9placement (surface > 90 cm)\", dd: \"0*\" },\n  { name: \"\u00c9viter de tomber en se d\u00e9placement (surface 30 \u00e0 90 cm)\", dd: \"5*\" },\n  { name: \"\u00c9viter de tomber en se d\u00e9placement (surface 15 \u00e0 30 cm)\", dd: \"10\" },\n  { name: \"\u00c9viter de tomber en se d\u00e9placement (surface 5 \u00e0 15 cm)\", dd: \"15\" },\n  { name: \"\u00c9viter de tomber en se d\u00e9placement (surface < 5 cm)\", dd: \"20\" },\n  { name: \"\" },\n  { name: \"Traverser une zone contr\u00f4l\u00e9e par un ennemi\", dd: \"DMD de l'ennemi\" },\n  { name: \"Traverser une zone occup\u00e9e par un ennemi\", dd: \"DMD de l'ennemi + 5\" },\n  { name: \"\" },\n  { name: \"Sauter en longeur (1,5 m)\", dd: \"5\" },\n  { name: \"Sauter en longeur (3 m)\", dd: \"10\" },\n  { name: \"Sauter en longeur (4,5 m)\", dd: \"15\" },\n  { name: \"Sauter en longeur (6 m)\", dd: \"20\" },\n  { name: \"Sauter en longeur (> 6 m)\", dd: \"20 +5 par 1,5 m\" },\n  { name: \"\" },\n  { name: \"Sauter en hauteur (30 cm)\", dd: \"4\" },\n  { name: \"Sauter en hauteur (60 cm)\", dd: \"8\" },\n  { name: \"Sauter en hauteur (90 cm)\", dd: \"12\" },\n  { name: \"Sauter en hauteur (120 cm)\", dd: \"16\" },\n  { name: \"Sauter en hauteur (> 120 cm)\", dd: \"16 + 4 par 30 cm\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Acrobaties : ${actors[0].name}`, \n    skillId: \"acr\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/feats/acrobatic.jpg", "actorIds": [], "_id": "3LvaO3ZWL5KKhJ8O"}
{"name": "Mettre \u00e0 jour les aptitudes", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro ajoute les aptitudes sur un PJ (bas\u00e9 sur ses classes) \n// \u00c0 utiliser typiquement apr\u00e8s un passage de niveau ou \u00e0 la cr\u00e9ation.\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\n// SCRIPT\n\nfunction getAbbr(name) {\n  if(name == \"Barbare\") { return \"Brb\" }\n  else if(name == \"Pr\u00eatre combattant\") { return \"Prc\" }\n  else if(name == \"Archer-mage\") { return \"ArM\" }\n  else if(name == \"Champion occultiste\") { return \"Chp\" }\n  else if(name == \"Magus\") { return \"Mgs\" }\n  else if(name == \"Chaman\") { return \"Chm\" }\n  else { return name.substring(0,3) }\n};\n\nconst actors = MacrosPF1.getActors()\n\nif (actors.length != 1) { \n  ui.notifications.error(\"Veuillez choisir un personnage dans la sc\u00e8ne!\")\n} else {\n  let actor = actors[0]\n\n  Dialog.confirm({\n    title: \"Mise \u00e0 jour des aptitudes\",\n    content: `Des aptitudes seront automatiquement ajout\u00e9es \u00e0 <b>${actor.name}</b> en fonction de ses classes.`,\n      yes: function() {\n\n        let classes = []\n        let classfeatures = []\n        for(let i=0; i<actor.data.items.length; i++) {\n          const item = actor.data.items[i]\n          if(item.type == \"feat\" && item.data.featType == \"classFeat\") {\n            classfeatures.push(item.name)\n          } else if(item.type == \"class\") {\n            classes.push(item)\n          }\n        }\n        \n        if(classes.length > 0) {\n          const pack = game.packs.get(\"pf1-fr.classfeaturesfr\");\n          pack.getIndex().then(index => {\n            let features = []\n            classes.forEach(c => {\n              let abbr = getAbbr(c.name)\n              let level = Number(c.data.level)\n              for(let lvl=1; lvl<=level; lvl++) {\n                for(const i in index) { \n                  const f = index[i]\n                  if(f.name.startsWith(`${abbr} ${lvl<10?\" \":\"\"}${lvl} :`) && classfeatures.indexOf(f.name) < 0) {\n                    features.push(pack.getEntity(f._id))\n                  }\n                }\n              }\n            });\n            Promise.all(features).then(list => {\n              let toAdd = []\n              list.forEach( f => { if(f.data.data.tags[0].indexOf(\"De base\") >= 0) { toAdd.push(f) } } );\n              actor.createEmbeddedEntity(\"OwnedItem\", toAdd)\n              ui.notifications.info(`${toAdd.length} aptitude(s) ajout\u00e9es!`)\n            });\n          });\n        }\n      },\n      no: () => {}\n  });\n}\n", "img": "systems/pf1/icons/skills/blue_18.jpg", "actorIds": [], "_id": "UN955S6O6dX0xzmM"}
{"name": "Test : Connaissances (Histoire)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (histoire)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (histoire)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Conna\u00eetre un \u00e9v\u00e9nement r\u00e9cent ou un \u00e9v\u00e9nement historique important\", dd: \"10\" },\n  { name: \"D\u00e9terminer la date approximative o\u00f9 un \u00e9v\u00e9nement sp\u00e9cifique a eu lieu\", dd: \"15\" },\n  { name: \"Conna\u00eetre un \u00e9v\u00e9nement historique ancien ou mal connu\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Histoire) : ${actors[0].name}`, \n    skillId: \"khi\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "7DxGg87WXhGAn6ol"}
{"name": "Test : Profession*", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de profession\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de profession\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question relative \u00e0 la profession\", dd: \"10 (simple) ou 15+ (complexe)\" },\n  { name: \"Utiliser son m\u00e9tier pour vivre (moiti\u00e9 du r\u00e9sultat en p.o. / semaine)\", dd: \"sp\u00e9cial\" },\n]\n\n// retrieve choice from storage\nlet specialty = null\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  specialty = localStorage.skillSpecialty\n  rollMode = localStorage.rollMode\n} else {\n  specialty = MacrosPF1SkillChecksDialog.skillSpecialty\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nif( !specialty ) { ui.notifications.warn(\"Aucune sp\u00e9cialit\u00e9 sp\u00e9cifi\u00e9e pour <i>Profession</i> !\") }\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Profession : ${actors[0].name}`, \n    skillId: \"pro\",\n    subSkillId: specialty,\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/yellow_41.jpg", "actorIds": [], "_id": "N4ZbObrhlTT8pG0p"}
{"name": "Test : Connaissances (G\u00e9ographie)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (g\u00e9ographie)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (g\u00e9ographie)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Reconna\u00eetre l'ethnie ou l'accent d'une cr\u00e9ature\", dd: \"10\" },\n  { name: \"Conna\u00eetre les caract\u00e9ristiques g\u00e9ographiques d'une r\u00e9gion\", dd: \"15\" },\n  { name: \"Conna\u00eetre l'emplacement du lieu d'habitation ou du site important le plus proche d'un endroit donn\u00e9\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (G\u00e9ographie) : ${actors[0].name}`, \n    skillId: \"kge\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "d0MEoDx5TDBYrntL"}
{"name": "Test : Connaissances (Noblesse)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (noblesse)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (noblesse)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Conna\u00eetre les dirigeants actuels et leurs blasons\", dd: \"10\" },\n  { name: \"Conna\u00eetre les r\u00e8gles de l'\u00e9tiquette\", dd: \"15\" },\n  { name: \"Conna\u00eetre les pr\u00e9tendants au tr\u00f4ne\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Noblesse) : ${actors[0].name}`, \n    skillId: \"kno\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "HVepZIvqqH3TALn3"}
{"name": "Test : Intimidation", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'intimidation\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'intimidation\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Forcer un adversaire \u00e0 se montrer amical (1d6 x 10 minutes)\", dd: \"10 + DV (cible) + Sag (cible)\" },\n  { name: \"D\u00e9moraliser un adversaire (secou\u00e9 1rd)\", dd: \"10 + DV (cible) + Sag (cible)\" },\n  \n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Intimidation : ${actors[0].name}`, \n    skillId: \"int\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_10.jpg", "actorIds": [], "_id": "chu1b7KWLKc3ddjv"}
{"name": "Test : \u00c9vasion", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'\u00e9vasion\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'\u00e9vasion\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Se lib\u00e9rer de cordes\", dd: \"20 + BMO de celui qui a ligot\u00e9\" },\n  { name: \"Se lib\u00e9rer d'un filet\", dd: \"20\" },\n  { name: \"Se lib\u00e9rer de contr\u00f4le des plantes\", dd: \"20\" },\n  { name: \"Se lib\u00e9rer de corde anim\u00e9e\", dd: \"20\" },\n  { name: \"Se lib\u00e9rer de empire v\u00e9g\u00e9tal ou enchev\u00eatrement\", dd: \"20\" },\n  { name: \"Se lib\u00e9rer du sort de collet\", dd: \"23\" },\n  { name: \"Se lib\u00e9rer de menottes\", dd: \"30\" },\n  { name: \"Se lib\u00e9rer d'un conduit \u00e9troit\", dd: \"30\" },\n  { name: \"Se lib\u00e9rer de menottes de qualit\u00e9 sup\u00e9rieure\", dd: \"35\" },\n  { name: \"Se lib\u00e9rer d'une situation de lutte\", dd: \"DMD de l'adversaire\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `\u00c9vasion : ${actors[0].name}`, \n    skillId: \"esc\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_06.jpg", "actorIds": [], "_id": "tFMT9FlBamA5pISR"}
{"name": "Test : Bluff", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de bluff\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de bluff\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Convaincre de dire la v\u00e9rit\u00e9\", dd: \"vs Psychologie de l'ennemi\" },\n  { name: \"Feinter en combat (CA sans Dex)\", dd: \"10 + BBA (ennemi) + Sag (ennemi)\" },\n  { name: \"Feinter en combat (CA sans Dex)\", dd: \"10 + Psychologie (ennemi)\" },\n  { name: \"Transmettre un message secret\", dd: \"15 (simple) ou 20 (complexe)\" },\n  { name: \"Cr\u00e9er une diversion pour se cacher\", dd: \"vs Psychologie de l'ennemi\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Bluff : ${actors[0].name}`, \n    skillId: \"blf\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/yellow_17.jpg", "actorIds": [], "_id": "hpSx1qbEoWjrcLqW"}
{"name": "Test : Escamotage", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'escamotage\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'escamotage\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Se saisir discr\u00e8tement d'un objet de la taille d'une pi\u00e8ce\", dd: \"10 (vs Perception si vigilence)\" },\n  { name: \"Cacher un objet de taille r\u00e9duite\", dd: \"variable\" },\n  { name: \"D\u00e9rober un petit objet \u00e0 une personne\", dd: \"20 vs Perception\" },\n \n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Escamotage : ${actors[0].name}`, \n    skillId: \"slt\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/items/inventory/pouch-belt.jpg", "actorIds": [], "_id": "ZYUak80DdjosNPFn"}
{"name": "Test : Artisanat*", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'artisanat\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'artisanat\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Alchimie: acide\", dd: \"15\" },\n  { name: \"Alchimie: allume-feu, b\u00e2ton fumig\u00e8ne ou feu gr\u00e9geois\", dd: \"20\" },\n  { name: \"Alchimie: antidote, b\u00e2ton \u00e9clairant, pierre \u00e0 tonnerre ou sacoche immobilisante\", dd: \"25\" },\n  { name: \"\" },\n  { name: \"Armures: armure ou bouclier\", dd: \"10 + bonus CA\" },\n  { name: \"\" },\n  { name: \"Arcs: arc long, arc court ou fl\u00e8ches\", dd: \"12\" },\n  { name: \"Arcs: arc long composite ou arc court composite\", dd: \"15\" },\n  { name: \"Arcs: arc composite limite de Force\", dd: \"15 + (2 x limite)\" },\n  { name: \"\" },\n  { name: \"Pi\u00e8ges: pi\u00e8ge m\u00e9canique\", dd: \"variable\" },\n  { name: \"\" },\n  { name: \"Armes: arbal\u00e8te ou carreaux\", dd: \"15\" },\n  { name: \"Armes: arme courante (corps \u00e0 corps ou \u00e0 distance)\", dd: \"12\" },\n  { name: \"Armes: arme de guerre (corps \u00e0 corps ou \u00e0 distance)\", dd: \"15\" },\n  { name: \"Armes: arme exotique (corps \u00e0 corps ou \u00e0 distance)\", dd: \"18\" },\n  { name: \"\" },\n  { name: \"Objet tr\u00e8s simple (ex: cuill\u00e8re en bois)\", dd: \"5\" },\n  { name: \"Objet courant (ex: pot en fer)\", dd: \"10\" },\n  { name: \"Objet de qualit\u00e9 (ex: cloche)\", dd: \"15\" },\n  { name: \"Objet complexe ou de qualit\u00e9 sup\u00e9rieure (ex: serrure)\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet specialty = null\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  specialty = localStorage.skillSpecialty\n  rollMode = localStorage.rollMode\n} else {\n  specialty = MacrosPF1SkillChecksDialog.skillSpecialty\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nif( !specialty ) { ui.notifications.warn(\"Aucune sp\u00e9cialit\u00e9 sp\u00e9cifi\u00e9e pour <i>Artisanat</i> !\") }\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Artisanat : ${actors[0].name}`, \n    skillId: \"crf\",\n    subSkillId: specialty,\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/items/inventory/anvil.jpg", "actorIds": [], "_id": "qXpQfBSWsrEpDLJR"}
{"name": "Test : \u00c9quitation", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'\u00e9quitation\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'\u00e9quitation\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Guider sa monture avec les genoux\", dd: \"5\" },\n  { name: \"Rester en selle\", dd: \"5\" },\n  { name: \"Combattre sur une monture entra\u00een\u00e9e au combat\", dd: \"10\" },\n  { name: \"Utiliser sa monture pour s'abriter\", dd: \"15\" },\n  { name: \"Amortir sa chute\", dd: \"15\" },\n  { name: \"Sauter un obstacle\", dd: \"15\" },\n  { name: \"\u00c9peronner sa monture\", dd: \"15\" },\n  { name: \"Contr\u00f4ler sa monture au combat\", dd: \"20\" },\n  { name: \"Monter en selle ou descendre de selle rapidement\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `\u00c9quitation : ${actors[0].name}`, \n    skillId: \"rid\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/feats/animal-affinity.jpg", "actorIds": [], "_id": "VYFOFwkdgiYJHQRI"}
{"name": "Test : D\u00e9guisement", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de d\u00e9guisement\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de d\u00e9guisement\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"D\u00e9terminer si le d\u00e9guisement est bon ou pas\", dd: \"vs Perception de l'ennemi\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `D\u00e9guisement : ${actors[0].name}`, \n    skillId: \"dis\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/violet_07.jpg", "actorIds": [], "_id": "XH0oAxXh3kVQ8ozU"}
{"name": "Test : Art de la magie", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'Art de la magie\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'art de la magie\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Identifier un sort lorsqu'il est lanc\u00e9\", dd: \"15 + niveau du sort\" },\n  { name: \"Apprendre un sort \u00e0 partir d'un grimoire ou d'un parchemin\", dd: \"15 + niveau du sort\" },\n  { name: \"Pr\u00e9parer un sort \u00e0 partir d'un grimoire emprunt\u00e9\", dd: \"15 + niveau du sort\" },\n  { name: \"Identifier les propri\u00e9t\u00e9s d'un objet magique en utilisant le sort de d\u00e9tection de la magie\", dd: \"15 + NLS de l'objet magique\" },\n  { name: \"D\u00e9chiffrer un parchemin\", dd: \"20 + niveau du sort\" },\n  { name: \"Fabriquer un objet magique\", dd: \"Variable selon les objets\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Art de la magie : ${actors[0].name}`, \n    skillId: \"spl\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/spells/evil-eye-eerie-2.jpg", "actorIds": [], "_id": "OLXazUWujj7D6Mj7"}
{"name": "Test : Connaissances (Exploration souterraine)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (exploration souterraine)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (exploration souterraine)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Identifier un danger souterrain\", dd: \"15 + FP du danger\" },\n  { name: \"Identifier un minerai, une roche ou un m\u00e9tal\", dd: \"10\" },\n  { name: \"D\u00e9terminer l'inclinaison d'une pente\", dd: \"15\" },\n  { name: \"D\u00e9terminer la profondeur \u00e0 laquelle le personnage se trouve\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Exploration souterraine) : ${actors[0].name}`, \n    skillId: \"kdu\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "ft3Q9AxkF04sMguR"}
{"name": "Test : Connaissances (Myst\u00e8res)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (myst\u00e8res)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (myst\u00e8res)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Identifier les auras magiques avec un sort de d\u00e9tection de la magie\", dd: \"15 + niveau du sort\" },\n  { name: \"Identifier un effet de sort d\u00e9j\u00e0 actif\", dd: \"20 + niveau du sort\" },\n  { name: \"Reconna\u00eetre des mat\u00e9riaux cr\u00e9\u00e9s par magie\", dd: \"20 + niveau du sort\" },\n  { name: \"Identifier un sort ayant pris le personnage pour cible\", dd: \"25 + niveau du sort\" },\n  { name: \"Identifier un sort lanc\u00e9 en utilisant une composante mat\u00e9rielle\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Myst\u00e8res) : ${actors[0].name}`, \n    skillId: \"kar\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "zYZP3lmHr4E8HkOm"}
{"name": "Test : Perception", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de perception\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de perception\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Sentir l'odeur de d\u00e9tritus en putr\u00e9faction\", dd: \"-10\" },\n  { name: \"Sentir l'odeur de la fum\u00e9e\", dd: \"0\" },\n  { name: \"\" },\n  { name: \"D\u00e9terminer si de la nourriture est avari\u00e9e\", dd: \"5\" },\n  { name: \"Identifier les effets d'une potion en la go\u00fbtant\", dd: \"15 + NLS de la potion\" },\n  { name: \"\" },\n  { name: \"Entendre les bruits d'un combat\", dd: \"-10\" },\n  { name: \"Entendre les d\u00e9tails d'une conversation\", dd: \"0\" },\n  { name: \"Entendre les pas d'une cr\u00e9ature\", dd: \"10\" },\n  { name: \"Entendre les d\u00e9tails d'une conversation \u00e0 voix basse\", dd: \"15\" },\n  { name: \"Entendre le son d'une clef tournant dans une serrure\", dd: \"20\" },\n  { name: \"Entendre le son d'un arc dont on tend la corde\", dd: \"25\" },\n  { name: \"\" },\n  { name: \"Voir une cr\u00e9ature visible\", dd: \"0\" },\n  { name: \"Trouver une porte cach\u00e9e de difficult\u00e9 moyenne\", dd: \"15\" },\n  { name: \"Trouver une porte secr\u00e8te de difficult\u00e9 moyenne\", dd: \"20\" },\n  { name: \"Percevoir les vibraton d'une cr\u00e9ature souterraine\", dd: \"25\" },\n  { name: \"Remarquer un pickpocket\", dd: \"vs Escamotage de l'adversaire\" },\n  { name: \"Remarquer une cr\u00e9ature discr\u00e8te\", dd: \"vs Discr\u00e9tion de l'adversaire\" },\n  { name: \"Trouver un pi\u00e8ge cach\u00e9\", dd: \"variable\" },\n  \n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Perception : ${actors[0].name}`, \n    skillId: \"per\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/light_02.jpg", "actorIds": [], "_id": "T0xfm2PVPsCZJLeM"}
{"name": "Test : Connaissances (Plans)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (plans)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (plans)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Conna\u00eetre le nom des plans\", dd: \"10\" },\n  { name: \"Reconna\u00eetre le plan sur lequel le personnage se trouve\", dd: \"15\" },\n  { name: \"Identifier l'origine d'une cr\u00e9ature provenant d'un autre plan\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Plans) : ${actors[0].name}`, \n    skillId: \"kpl\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "dquiaDUn3NVmhn42"}
{"name": "Test : Diplomatie", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de diplomatie\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de diplomatie\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Modifier l'attitude d'un PNJ (Hostile)\", dd: \"25 + Cha de la cr\u00e9ature\" },\n  { name: \"Modifier l'attitude d'un PNJ (Inamical)\", dd: \"20 + Cha de la cr\u00e9ature\" },\n  { name: \"Modifier l'attitude d'un PNJ (Indiff\u00e9rent)\", dd: \"15 + Cha de la cr\u00e9ature\" },\n  { name: \"Modifier l'attitude d'un PNJ (Amical)\", dd: \"10 + Cha de la cr\u00e9ature\" },\n  { name: \"Modifier l'attitude d'un PNJ (Serviable)\", dd: \"0 + Cha de la cr\u00e9ature\" },\n  { name: \"\" },\n  { name: \"Demander un conseil g\u00e9n\u00e9ral ou demander le chemain\", dd: \"DD (attitude) - 5\" },\n  { name: \"Demander des conseils pr\u00e9cis\", dd: \"DD (attitude)\" },\n  { name: \"\" },\n  { name: \"Demander de l'aide (acte simple)\", dd: \"DD (attitude)\" },\n  { name: \"Demander de l'aide (long ou complexe)\", dd: \"DD (attitude) + 5\" },\n  { name: \"Demander de l'aide (dangereux)\", dd: \"DD (attitude) + 10\" },\n  { name: \"Demander de l'aide (risque d'\u00eatre puni)\", dd: \"DD (attitude) + 15 ou plus\" },\n  { name: \"\" },\n  { name: \"Demander de r\u00e9v\u00e9ler un secret peu important\", dd: \"DD (attitude) + 5\" },\n  { name: \"Demander de r\u00e9v\u00e9ler un secret important\", dd: \"DD (attitude) + 10 ou plus\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Diplomatie : ${actors[0].name}`, \n    skillId: \"dip\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/gray_05.jpg", "actorIds": [], "_id": "6IQVIEXEIxvUbjgm"}
{"name": "Aper\u00e7u des PJs", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro pr\u00e9sente une vue d'ensemble des PJs\n//\n// Base : Foundry VTT (0.7.7)\n// Syst\u00e8me : Pathfinder 1 (0.76.4)\n// Module(s) n\u00e9cessaire(s) : pf1-fr\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\n// CONFIGURATION\n// - skills: liste de comp\u00e9tences \u00e0 afficher\n// - display: liste de tous les \u00e9l\u00e9ments \u00e0 afficher\n// \nconst SKILLS = [ \"Acr\", \"Spl\", \"Blf\", \"KDu\", \"KLo\", \"KGe\", \"KHi\", \"KEn\", \"KAr\", \"KNa\", \"KNo\", \"KPl\", \"KRe\", \"Dis\", \"Dip\", \"Ste\", \"Han\", \"Rid\", \"Clm\", \"Slt\", \"Apr\", \"Esc\", \"Int\", \"Lin\", \"Swm\", \"Per\", \"Hea\", \"Sen\", \"Dev\", \"Sur\", \"UMD\", \"Fly\" ]\n\nSKILLS.sort(function(a,b) { return game.i18n.localize(\"PF1.Skill\" + a).localeCompare(game.i18n.localize(\"PF1.Skill\" + b));  })\n\n// affichage par d\u00e9faut\nfunction formatSolo(actor, val) {\n  return val[0].toString()\n}\n\n// affichage par d\u00e9faut\nfunction formatSoloWithSign(actor, val) {\n  return (val[0] >= 0 ? \"+\" : \"\") + val[0].toString()\n}\n\n// fonction pour afficher les pv\nfunction formatPv(actor, val) {\n  return `${val[0]}/${val[1]}`\n}\n\n// fonction pour afficher la classe d'armure\nfunction formatCA(actor, val) {\n  return `${val[0]} (${val[1]}/${val[2]})`\n}\n\n// fonction pour afficher les statistiques au format \"12 (+1)\"\nfunction formatAbilities(actor, val) {\n  const mod = (val[1] >= 0 ? \"+\" : \"\") + val[1].toString()\n  return `${mod} (${val[0].toString()})`\n}\n\n// fonction pour afficher les comp\u00e9tences au format \"+3 (2)\"\nfunction formatSkill(actor, val) {\n  const sk = val[0]\n  if( !sk || (sk.rt && !sk.rank) ) return \"\"\n  const rank = sk.rank > 0 ? sk.rank.toString() : \"-\"\n  const mod = (sk.mod >= 0 ? \"+\" : \"\") + sk.mod.toString()\n  return `${mod} (${rank})`\n}\n\n// action pour les jets de caract\u00e9ristiques\nasync function rollAbility(actors, row) {\n  for (let a = 0; a < actors.length; a++) {\n    let o = actors[a];\n    await o.rollAbility(row.ability, { event: new MouseEvent({}), noSound: a > 0, });\n  }\n}\n\n// action pour les comp\u00e9tences\nasync function rollSkill(actors, row) {\n  for (let a = 0; a < actors.length; a++) {\n    let o = actors[a];\n    let info = o.getSkillInfo(row.skill);\n    if (!info || (info.rt && !info.rank)) continue;\n    await o.rollSkill(row.skill, { event: new MouseEvent({}), skipDialog: true, noSound: a > 0, });\n  }\n}\n\n// action pour les jets de sauvegarde\nasync function rollSaving(actors, row) {\n  for (let a = 0; a < actors.length; a++) {\n    let o = actors[a];\n    await o.rollSavingThrow(row.saving, { event: new MouseEvent({}), noSound: a > 0, });\n  }\n}\n\n\nconst DISPLAY = [\n  { label: '', path: ['name'], th: true, format: formatSolo },\n  { label: \"XP\", path: ['data.data.details.xp.value'], format: formatSolo },\n  \n  { label: game.i18n.localize(\"PF1.Attributes\"), th: true },\n  { label: game.i18n.localize(\"PF1.AbilityShortStr\"), path: ['data.data.abilities.str.total', 'data.data.abilities.str.mod'], format: formatAbilities, ability: 'str', action: rollAbility },\n  { label: game.i18n.localize(\"PF1.AbilityShortDex\"), path: ['data.data.abilities.dex.total', 'data.data.abilities.dex.mod'], format: formatAbilities, ability: 'dex', action: rollAbility },\n  { label: game.i18n.localize(\"PF1.AbilityShortCon\"), path: ['data.data.abilities.con.total', 'data.data.abilities.con.mod'], format: formatAbilities, ability: 'con', action: rollAbility },\n  { label: game.i18n.localize(\"PF1.AbilityShortInt\"), path: ['data.data.abilities.int.total', 'data.data.abilities.int.mod'], format: formatAbilities, ability: 'int', action: rollAbility },\n  { label: game.i18n.localize(\"PF1.AbilityShortWis\"), path: ['data.data.abilities.wis.total', 'data.data.abilities.wis.mod'], format: formatAbilities, ability: 'wis', action: rollAbility },\n  { label: game.i18n.localize(\"PF1.AbilityShortCha\"), path: ['data.data.abilities.cha.total', 'data.data.abilities.cha.mod'], format: formatAbilities, ability: 'cha', action: rollAbility },\n\n  { label: game.i18n.localize(\"PF1.ItemTypeAttack\"), th: true },\n  { label: game.i18n.localize(\"PF1.Initiative\"), path: ['data.data.attributes.init.total'], format: formatSoloWithSign },\n  { label: game.i18n.localize(\"PF1.CMBAbbr\"), path: ['data.data.attributes.cmb.total'], format: formatSoloWithSign },\n\n  { label: game.i18n.localize(\"PF1.Defenses\"), th: true },\n  { label: game.i18n.localize(\"PF1.HPShort\"), path: ['data.data.attributes.hp.value', 'data.data.attributes.hp.max'], format: formatPv },\n  { label: game.i18n.localize(\"PF1.ACNormal\"), path: ['data.data.attributes.ac.normal.total', 'data.data.attributes.ac.touch.total', 'data.data.attributes.ac.flatFooted.total'], format: formatCA },\n  { label: game.i18n.localize(\"PF1.SavingThrowRef\"), path: ['data.data.attributes.savingThrows.ref.total'], format: formatSoloWithSign, saving: \"ref\", action: rollSaving },\n  { label: game.i18n.localize(\"PF1.SavingThrowFort\"), path: ['data.data.attributes.savingThrows.fort.total'], format: formatSoloWithSign, saving: \"fort\", action: rollSaving },\n  { label: game.i18n.localize(\"PF1.SavingThrowWill\"), path: ['data.data.attributes.savingThrows.will.total'], format: formatSoloWithSign, saving: \"will\", action: rollSaving },\n  { label: game.i18n.localize(\"PF1.CMDAbbr\"), path: ['data.data.attributes.cmd.total'], format: formatSolo },\n\n  { label: game.i18n.localize(\"PF1.Skills\"), th: true },\n]\n\n\nSKILLS.forEach( s => DISPLAY.push( \n  { \n    label: game.i18n.localize(\"PF1.Skill\" + s), \n    path: [`data.data.skills.${s.toLowerCase()}`], \n    format: formatSkill, skill: s.toLowerCase(), \n    action: rollSkill \n  } \n));\n\n// SCRIPT\n// Do NOT change unless you know what you're doing!\n\nlet actorIds = []\ngame.users.forEach( function(u) { if( !u.isGM ) { actorIds.push(u.data.character) } } )\nconst actors = game.actors.filter( a => actorIds.indexOf( a.id ) >= 0 )\n\nnew PCOverview(null, { actors: actors, display: DISPLAY }).render(true)\n", "img": "systems/pf1/icons/items/inventory/tabard-blue.jpg", "actorIds": [], "_id": "X2jPhX9mxq8seUf2"}
{"name": "Test : Utilisation d'objets magiques", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'utilisation d'objets magiques\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'utilisation d'objets magiques\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Activer un objet par chance\", dd: \"25\" },\n  { name: \"D\u00e9chiffrer un sort \u00e9crit\", dd: \"25 + niveau du sort\" },\n  { name: \"\" },\n  { name: \"Simuler une aptitude de classe\", dd: \"20\" },\n  { name: \"Simuler une valeur de caract\u00e9ristique\", dd: \"voir description\" },\n  { name: \"Simuler une race\", dd: \"25\" },\n  { name: \"Simuler un alignement\", dd: \"30\" },\n  { name: \"Simuler un parchemin\", dd: \"20 + niveau du sort\" },\n  { name: \"Simuler une baguette\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Utilisation d'objets magiques : ${actors[0].name}`, \n    skillId: \"umd\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/items/inventory/wand-star.jpg", "actorIds": [], "_id": "URIhTJGymzETbG9S"}
{"name": "Test : Premiers secours", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de premiers secours\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de premiers secours\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Stabiliser une personne mourante\", dd: \"15\" },\n  { name: \"Effectuer des soins suivis pendant un jour ou plus\", dd: \"15\" },\n  { name: \"\" },\n  { name: \"Soigner une blessure de chausse-trappe, de croissance d'\u00e9pines ou de pierres ac\u00e9r\u00e9es\", dd: \"15\" },\n  { name: \"Soigner des blessures mortelles\", dd: \"20\" },\n  { name: \"Soigner un empoisonnement (+4 JdS)\", dd: \"DD du JS contre le poison\" },\n  { name: \"Soigner une maladie (+4 JdS)\", dd: \"DD du JS contre la maladie\" },\n  \n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Premiers secours : ${actors[0].name}`, \n    skillId: \"hea\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/blood_04.jpg", "actorIds": [], "_id": "itXZdskOnSbbsbMd"}
{"name": "Test : Psychologie", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de psychologie\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de psychologie\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Sentir si quelque-chose cloche (pressentiment)\", dd: \"20\" },\n  { name: \"Percevoir un enchantement\", dd: \"25 ou 15 (domination)\" },\n  { name: \"Intercepter un message secret\", dd: \"vs Bluff de celui qui \u00e9met le message\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Psychologie : ${actors[0].name}`, \n    skillId: \"sen\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_09.jpg", "actorIds": [], "_id": "zFcfhb5acaDaVv7n"}
{"name": "Test : Connaissances (Religion)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (religion)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (religion)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Reconna\u00eetre le symbole d'une divinit\u00e9 courante ou identifier un membre de son clerg\u00e9\", dd: \"10\" },\n  { name: \"Conna\u00eetre les grandes lignes de la mythologie et de la doctrine d'une foi\", dd: \"15\" },\n  { name: \"Reconna\u00eetre le symbole d'une divinit\u00e9 peu connnue ou identifier un membre de son clerg\u00e9\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Religion) : ${actors[0].name}`, \n    skillId: \"kre\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "dR8tchaKy8OezxVL"}
{"name": "Test : Survie", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de survie\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de survie\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Se d\u00e9brouiller en pleine nature sauvage (chasse, cueillette, ...)\", dd: \"10\" },\n  { name: \"Acqu\u00e9rir des bonus aux JdS contre les rigueurs du climat\", dd: \"15\" },\n  { name: \"Ne pas se perdre et remarquer les dangers naturels\", dd: \"15\" },\n  { name: \"Pr\u00e9dire les conditions climatiques pour les 24h \u00e0 venir\", dd: \"15\" },\n  { name: \"\" },\n  { name: \"Suivre les traces (sol tr\u00e8s mou)\", dd: \"5\" },\n  { name: \"Suivre les traces (mou)\", dd: \"10\" },\n  { name: \"Suivre les traces (ferme)\", dd: \"15\" },\n  { name: \"Suivre les traces (dur)\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Survie : ${actors[0].name}`, \n    skillId: \"sur\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/green_10.jpg", "actorIds": [], "_id": "FPkOj8fuJVNF02PG"}
{"name": "Test : Sabotage", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de sabotage\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de sabotage\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Coincer un serrure (1 rd)\", dd: \"10\" },\n  { name: \"Saboter une roue de chariot (1d4 rds)\", dd: \"15\" },\n  { name: \"D\u00e9sarmer/r\u00e9armer un pi\u00e8ge (2d4 rds)\", dd: \"20\" },\n  { name: \"D\u00e9sarmer/r\u00e9armer un pi\u00e8ge complexe (2d4 rds)\", dd: \"25\" },\n  { name: \"Saboter un m\u00e9canisme \u00e0 engrenages complexes (2d4 rds)\", dd: \"25\" },\n  { name: \"\" },\n  { name: \"Crocheter une serrure simple\", dd: \"20\" },\n  { name: \"Crocheter une serrure moyenne\", dd: \"25\" },\n  { name: \"Crocheter une serrure bonne\", dd: \"30\" },\n  { name: \"Crocheter une serrure excellente\", dd: \"40\" },\n  \n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Sabotage : ${actors[0].name}`, \n    skillId: \"dev\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/items/inventory/lockpick.jpg", "actorIds": [], "_id": "P7ex3VGPNvBtjhkf"}
{"name": "Test : Connaissances (Ing\u00e9nierie)", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de connaissances (ing\u00e9nierie)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de connaissances (ing\u00e9nierie)\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"R\u00e9pondre \u00e0 une question ayant trait \u00e0 sa sp\u00e9cialit\u00e9\", dd: \"10 (basique), 15 (facile), 20 (difficile) ou 30 (tr\u00e8s difficile)\" },\n  { name: \"Reconna\u00eetre un monstre et identifier ses particularit\u00e9s ou points faibles\", dd: \"5 (commun), 10 (normal) ou 15+ (rare) + FP du monstre\" },\n  { name: \"\" },\n  { name: \"Reconna\u00eetre une construction dangereuse\", dd: \"10\" },\n  { name: \"D\u00e9terminer le style ou l'\u00e2ge d'un \u00e9difice\", dd: \"15\" },\n  { name: \"D\u00e9terminer les points faibles d'un \u00e9difice\", dd: \"20\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Connaissances (Ing\u00e9nierie) : ${actors[0].name}`, \n    skillId: \"ken\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/red_25.jpg", "actorIds": [], "_id": "E0vFljuVgm1jwri2"}
{"name": "Test : Estimation", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'estimation\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'estimation\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"\u00c9valuer les objets courants\", dd: \"20 ou plus\" },\n  { name: \"Rep\u00e9rer l'objet le plus pr\u00e9cieux au sein d'un tr\u00e9sor\", dd: \"20 ou plus\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Estimation : ${actors[0].name}`, \n    skillId: \"apr\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/items/jewelry/ring-orb.jpg", "actorIds": [], "_id": "EE9J9KDcuMkbYahA"}
{"name": "Test : Repr\u00e9sentation*", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de repr\u00e9sentation\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de repr\u00e9sentation\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Divertir son public et en vivre\", dd: \"voir d\u00e9tails\" },\n]\n\n// retrieve choice from storage\nlet specialty = null\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  specialty = localStorage.skillSpecialty\n  rollMode = localStorage.rollMode\n} else {\n  specialty = MacrosPF1SkillChecksDialog.skillSpecialty\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nif( !specialty ) { ui.notifications.warn(\"Aucune sp\u00e9cialit\u00e9 sp\u00e9cifi\u00e9e pour <i>Repr\u00e9sentation</i> !\") }\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Repr\u00e9sentation : ${actors[0].name}`, \n    skillId: \"prf\",\n    subSkillId: specialty,\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/gray_06.jpg", "actorIds": [], "_id": "GFOBTXEvXIDNUaqk"}
{"name": "Test : Vol", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de vol\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de vol\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Se d\u00e9placer sur une distance inf\u00e9rieure \u00e0 la moiti\u00e9 de sa vitesse et rester en vol\", dd: \"10\" },\n  { name: \"Faire du surplace/vol stationnaire\", dd: \"15\" },\n  { name: \"Virer de plus de 45\u00b0 en sacrifiant 1,50 m de mouvement\", dd: \"15\" },\n  { name: \"Virer \u00e0 180\u00b0 en sacrifiant 3 m de mouvement\", dd: \"20\" },\n  { name: \"Voler vers le haut selon un angle de plus de 45\u00b0\", dd: \"20\" },\n  { name: \"\" },\n  { name: \"\u00c9viter une chute vers le sol suite \u00e0 une collision\", dd: \"25\" },\n  { name: \"\u00c9viter les d\u00e9g\u00e2ts d'une chute\", dd: \"10\" },\n  { name: \"\u00c9viter de perdre 3 m d'altitude suite \u00e0 des d\u00e9g\u00e2ts\", dd: \"10\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Vol : ${actors[0].name}`, \n    skillId: \"fly\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/blue_02.jpg", "actorIds": [], "_id": "jRVlxAqqIoJJP1lm"}
{"name": "Test : Linguistique", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test de linguistique\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test de linguistique\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"D\u00e9crypter une page d'un texte incomplet ou r\u00e9dig\u00e9 dans une langue inconnue ou archa\u00efque\", dd: \"20 (simple), 25 (normal), 30 (complexe)\" },\n  { name: \"\" },\n  { name: \"D\u00e9tecter une contrefa\u00e7on\", dd: \"vs Linguistique du cr\u00e9ateur\" },\n  { name: \"Cr\u00e9er une contrefa\u00e7on\", dd: \"vs Linguistique de l'examinateur\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Linguistique : ${actors[0].name}`, \n    skillId: \"lin\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/light_07.jpg", "actorIds": [], "_id": "pCypbeI6YdMeIc61"}
{"name": "Test : Escalade", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro propose les diff\u00e9rentes options pour un test d'escalade\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\nconst CHECKS = [\n  { name: \"Effectuer un test d'escalade\", dd: \"-\" },\n  { name: \"\" },\n  { name: \"Progresser le long d'une pente fortement inclin\u00e9e ou un mur\", dd: \"variable\" },\n  { name: \"Pente trop inclin\u00e9e pour permettre d'avancer en marchant\", dd: \"0\" },\n  { name: \"Corde \u00e0 noeuds accroch\u00e9e pr\u00e8s d'un mur contre lequel on peut s'appuyer\", dd: \"0\" },\n  { name: \"Corde accroch\u00e9e pr\u00e8s d'un mur contre lequel on peut s'appuyer\", dd: \"5\" },\n  { name: \"Corde \u00e0 noeuds ou corde cr\u00e9e par le sort corde enchant\u00e9e\", dd: \"5\" },\n  { name: \"Surface garnie de corniches o\u00f9 on peut se tenir ou s'accrocher\", dd: \"10\" },\n  { name: \"Surface comprenant suffisamment de prises (rocher escarp\u00e9, arbre, corde sans noeud, rebord)\", dd: \"15\" },\n  { name: \"Surface in\u00e9gale comprenant quelques petites prises (ex: mur de donjon)\", dd: \"20\" },\n  { name: \"Surface rugueuse (paroi rocheuse, mur de briques)\", dd: \"25\" },\n  { name: \"D\u00e9vers ou plafond garnis de prises pour les mains uniquement\", dd: \"30\" },\n  { name: \"\" },\n  { name: \"Stopper sa chute dans une pente\", dd: \"10 + DD de la pente\" },\n  { name: \"Stopper sa chute dans une paroi\", dd: \"20 + DD de la paroi\" },\n  { name: \"Stopper la chute d'une autre personne\", dd: \"Att. de contact + DD de la surface + 10\" },\n]\n\n// retrieve choice from storage\nlet rollMode = null\nif (typeof(Storage) !== \"undefined\") {\n  rollMode = localStorage.rollMode\n} else {\n  rollMode = MacrosPF1SkillChecksDialog.rollMode\n}\n\nconst actors = MacrosPF1.getActors()\nif( actors.length > 0 ) {\n  new MacrosPF1SkillCheckDialog(null, {\n    actorId: actors[0]._id,\n    title: `Escalade : ${actors[0].name}`, \n    skillId: \"clm\",\n    checks: CHECKS,\n    rollMode: rollMode\n  }).render(true)\n}\n", "img": "systems/pf1/icons/skills/green_31.jpg", "actorIds": [], "_id": "JgtyZ1IBOjXna75w"}
{"name": "Tests de comp\u00e9tence", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro permet d'ex\u00e9cuter n'importe quelle autre macro de test de comp\u00e9tence\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n//\n\n// OPTION 1: mode bas\u00e9 sur la s\u00e9lection dans le chat\nnew MacrosPF1SkillChecksDialog().render(true)\n\n// OPTION 2: mode \"\u00e0 l'aveugle\"\n// new MacrosPF1SkillChecksDialog(null, { rollMode: \"blindroll\" } ).render(true)\n", "img": "systems/pf1/icons/feats/skill-focus.jpg", "actorIds": [], "_id": "GuUAuptdWJhAXFVL"}
{"name": "Canalisation d'\u00e9nergie", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro lance une canalisation d'\u00e9nergie en permettant de choisir s'il s'agit\n// d'un soin ou de d\u00e9g\u00e2ts. Techniquement, la macro va changer le type d'attaque sur\n// l'aptitude en question avant de l'ex\u00e9cuter.\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : -\n// Auteur(s) : Sven Werlen (Dorgendubal#3348)\n\n///// CONFIGURATION\nconst FEATNAME = \"Pr\u00ea  1 : Canalisation d'\u00e9nergie 1d6\"\n\n///// SCRIPT\nfunction macroChannelEnergy() {\n\n  // R\u00e9cup\u00e9rer l'acteur s\u00e9lectionn\u00e9\n  const actors = MacrosPF1.getActors()\n    \n  // V\u00e9rifier que l'acteur existe\n  if (!actors.length) return ui.notifications.error(\"Vous ne poss\u00e9dez aucun acteur! Veuillez contacter votre MJ.\");\n  const hero = actors[0];\n\n  let feat = hero.items.find( i => i.type === \"feat\" && i.name === FEATNAME )\n  if( !feat ) {\n    ui.notifications.error(`Le PJ <i>${hero.name}</i> ne poss\u00e8de pas l'aptitude <i>${FEATNAME}</i>. Veuillez l'ajouter!`);\n  } else {\n    new Dialog({\n        title: \"Soigner ou blesser\",\n        content: `Cette macro ex\u00e9cutera l'aptitude <i>${FEATNAME}</i> avec le PJ <i>${hero.name}</i>, apr\u00e8s avoir modifi\u00e9 le type d'attaque (soin/autre). Choisissez le type de canalisation d'\u00e9nergie.`,\n        buttons: {\n          one: {\n            icon: '<i class=\"fas fa-heart\"></i>',\n            label: \"Soigner\",\n            callback: () => { feat.data.data.actionType = \"heal\"; feat.use({ev: null}) } \n          },\n          two: {\n            icon: '<i class=\"fas fa-skull\"></i>',\n            label: \"Blesser\",\n            callback: () => { feat.data.data.actionType = \"other\"; feat.use({ev: null}) } \n          }\n        },\n        default: \"one\",\n      }).render(true);\n  }\n}\n\nmacroChannelEnergy();\n", "img": "systems/pf1/icons/feats/extra-mercy.jpg", "actorIds": [], "_id": "lhSoNvhUMvfYYVh2"}
{"name": "Incanter le sort \"Image miroir\"", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro permet de lancer le sort \"Image miroir\" et d'activer les effets sur le token.\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : Magic Token FX (0.4.2b)\n// Modules(s) optionnel(s) : Macro Marker (voir NOTES)\n// Auteur(s) : Alexandre Nizoux (deurk#5568), Sven Werlen (Dorgendubal#3348), Noon\n\n///// CONFIGURATION\nconst spellName = \"Image miroir\";\nconst messagePrefix = \"Nombre d'images miroir g\u00e9n\u00e9r\u00e9es: \";\n\n///// SCRIPT\nfunction macroCastMirrorImages() {\n    \n    if( !MacrosPF1.hasModule(\"tokenmagic\") ) return ui.notifications.error(\"Cette macro requiert le module <i>Magic Token FX</i>.\");\n  \n    // R\u00e9cup\u00e9rer l'acteur s\u00e9lectionn\u00e9\n    const actors = MacrosPF1.getActors()\n   \n    // V\u00e9rifier que l'acteur existe\n    if (!actors.length) return ui.notifications.error(\"Vous ne poss\u00e9dez aucun acteur! Veuillez contacter votre MJ.\");\n    const hero = actors[0];\n\n    // V\u00e9rifier qu'un jeton de l'acteur existe\n    const token = canvas.tokens.placeables.find(token => token.actor.id === hero.id);\n    if (!token) return ui.notifications.error(`L'acteur nomm\u00e9 <i>${hero.name}</i> n'a pas de jeton sur la sc\u00e8ne`);\n\n    // V\u00e9rifier que l'acteur dispose bien du sort\n    const spell = hero.items.find(item => item.type === \"spell\" && item.name === spellName);\n    if (!spell) return ui.notifications.error(`L'acteur <i>${hero.name}</i> ne dispose pas du sort <i>${spellName}</i>`);\n        \n    // WORKAROUND : useSpell ne diff\u00e9rencie pas les ex\u00e9cutions r\u00e9ussies ou rat\u00e9es (BUG),\n    // on se base sur les notifications pour d\u00e9terminer le r\u00e9sultat du lancement de sort\n\n    // Lancer le sort et consommer l'emplacement\n    const notifLength =  ui.notifications.active.length;\n    hero.useSpell(spell, {}, {skipDialog: true}).then(result => {\n\n        if (ui.notifications.active.length != notifLength) return;\n        \n        // Definir le nombre d'images \u00e0 afficher\n        const rollData = spell.getRollData();\n        let imagesRoll = new Roll(\"1d4 + floor(@cl/3)\", rollData).roll();\n        const mirrorImages = Math.min(imagesRoll.total, 8);\n\n        // Afficher un message annoncant le nombre d'images g\u00e9n\u00e9r\u00e9es\n        imagesRoll.toMessage({\n            speaker: ChatMessage.getSpeaker({actor: hero}),\n            flavor: messagePrefix,\n            rollMode: game.settings.get(\"core\", \"rollMode\")\n        });\n\n        // Sauvegarder le nombre d'images pour traitement ult\u00e9rieur\n        hero.setFlag(\"pf1\", \"spells\", {\"mirrorImages\": mirrorImages});\n\n        // Activer l'effet visuel sur le jeton\n        let params = [{\n            filterType: \"images\",\n            filterId: \"myMirrorImages\",\n            time: 0,\n            nbImage: mirrorImages,\n            alphaImg: 0.6,\n            alphaChr: 1.0,\n            blend: 4,\n            ampX: 0.20,\n            ampY: 0.35,\n            zOrder: 20,\n            animated : {\n                time: { \n                    active: true, \n                    speed: 0.0010, \n                    animType: \"move\" \n                }\n            }\n        }];\n        TokenMagic.addUpdateFilters(token, params); \n    });  \n}\n\nmacroCastMirrorImages();\n\n", "img": "systems/pf1/icons/feats/improved-feint.jpg", "actorIds": [], "_id": "FgnRmbsZ0zuxNbBw", "flags": {"macro-marker": {"activeData": {"icon": "systems/pf1/icons/feats/improved-feint.jpg", "tooltip": "Sort \"Image miroir\" actif!", "colour": "#edc412", "trigger": "\nconst actors = MacrosPF1.getActors()\nreturn actors.length > 0 && actors[0].getFlag(\"pf1\", \"spells.mirrorImages\");\n"}}}}
{"name": "Retirer une image miroir", "type": "script", "scope": "global", "command": "///// INFORMATIONS\n//\n// Cette macro permet de retirer une image miroir (\u00e0 utiliser apr\u00e8s la macro d'incantation!)\n//\n// Base : Foundry VTT (0.6.6)\n// Syst\u00e8me : Pathfinder 1 (0.73.7)\n// Module(s) n\u00e9cessaire(s) : Magic Token FX (0.4.2b)\n// Modules(s) optionnel(s) : -\n// Auteur(s) : Alexandre Nizoux (deurk#5568), Sven Werlen (Dorgendubal#3348)\n\n///// CONFIGURATION\nconst heroName = \"Anton Haralamb\";\n\n///// SCRIPT\nfunction removeSingleMirrorImage() {\n    \n    if( !MacrosPF1.hasModule(\"tokenmagic\") ) return ui.notifications.error(\"Cette macro requiert le module <i>Magic Token FX</i>.\");\n  \n    // R\u00e9cup\u00e9rer l'acteur s\u00e9lectionn\u00e9\n    const actors = MacrosPF1.getActors()\n   \n    // V\u00e9rifier que l'acteur existe\n    if (!actors.length) return ui.notifications.error(\"Vous ne poss\u00e9dez aucun acteur! Veuillez contacter votre MJ.\");\n    const hero = actors[0];\n  \n    // V\u00e9rifier qu'un jeton de l'acteur existe\n    const token = canvas.tokens.placeables.find(token => token.actor.id === hero.id);\n    if (!token) return ui.notifications.error(`L'acteur nomm\u00e9 <i>${hero.name}</i> n'a pas de jeton sur la sc\u00e8ne`);\n\n    // R\u00e9cup\u00e9rer le nombre d'images miroir et le mettre \u00e0 jour\n    let mirrorImages = hero.getFlag(\"pf1\", \"spells.mirrorImages\") - 1;\n    hero.setFlag(\"pf1\", \"spells\", {\"mirrorImages\": (mirrorImages < 1 ? 0 : mirrorImages)});\n    \n    // Supprimer l'effet visuel du jeton si il ne reste plus d'images miroir\n    if (mirrorImages < 1) return TokenMagic.deleteFilters(token, \"myMirrorImages\");\n    \n    // Mettre \u00e0 jour le nombre d'images miroir et ajuster l'effet visuel sur le jeton\n    hero.setFlag(\"pf1\", \"spells\", {\"mirrorImages\": mirrorImages});\n    let params = [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        nbImage: mirrorImages,\n    }];\n    TokenMagic.addUpdateFilters(token, params); \n}\n\nremoveSingleMirrorImage();\n\n", "img": "systems/pf1/icons/spells/explosion-orange-1.jpg", "actorIds": [], "_id": "xkoqViB0HUTEIPHC"}
